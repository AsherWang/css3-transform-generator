////
/// css3-transform-generator.scss
/// Repository: https://github.com/AsherWang/css3-transform-generator
/// By: AsherWang
////

//some tool-functions
@function k-pi() {
    @return 3.141592653;
}

@function k-abs($x) {
    @if $x<0 {
        @return -$x;
    }
    @return $x;
}

@function k-sqrt($x) {
    $g: $x;
    @while k-abs( $g * $g - $x ) > 0.000001 {
        $g: ( $g + $x / $g ) / 2;
    }
    @return $g;
}

@function k-cos($deg) {
    $d: $deg/180*k-pi();
    $d: $d*$d;
    $ret: 1;
    $n: 1;
    @for $i from 1 through 20 {
        $temp: 2 * $i;
        $n: - $n * $d / ($temp * ($temp - 1));
        $ret: $ret + $n;
    }
    @return $ret;
}

@function k-sin($deg) {
    $d: $deg/180*k-pi();
    $ret: $d;
    $d: $d*$d;
    $n: $ret;
    @for $i from 1 through 20 {
        $temp: 2 * $i;
        $n: - $n * $d / ($temp * ($temp + 1));
        $ret: $ret + $n;
    }
    @return $ret;
}

@function k-tan($deg) {
    @return k-sin($deg)/k-cos($deg);
}

// return the value of a matrix in row $row ,col $col
@function k-matrix($matrix,$row,$col) {
    @return nth(nth($matrix, $row), $col);
}

//format the self-defined-2d-matrix to fit transform function matrix
@function k-matrix-param($matrix) {
    @return (k-matrix($matrix, 1, 1), k-matrix($matrix, 1, 2), k-matrix($matrix, 2, 1), k-matrix($matrix, 2, 2), k-matrix($matrix, 3, 1), k-matrix($matrix, 3, 2));
}

// format the self-defined-3d-matrix to fit transform function matrix3d
@function k-3dmatrix-param($matrix) {
    @return (
            k-matrix($matrix, 1, 1), k-matrix($matrix, 1, 2), k-matrix($matrix, 1, 3), k-matrix($matrix, 1, 4),
            k-matrix($matrix, 2, 1), k-matrix($matrix, 2, 2), k-matrix($matrix, 2, 3), k-matrix($matrix, 2, 4),
            k-matrix($matrix, 3, 1), k-matrix($matrix, 3, 2), k-matrix($matrix, 3, 3), k-matrix($matrix, 3, 4),
            k-matrix($matrix, 4, 1), k-matrix($matrix, 4, 2), k-matrix($matrix, 4, 3), k-matrix($matrix, 4, 4)
    );
}

// $matrix is like ((1 2 3),(1 2 3)) for [1 2 3, 1 2 3]
// make sure the two matrix could be join together
@function k-matrix-multiplier-tool($matrix1,$matrix2,$row,$col) {
    @return k-matrix($matrix1,$row,1)*k-matrix($matrix2,1,$col)+k-matrix($matrix1,$row,2)*k-matrix($matrix2,2,$col)+k-matrix($matrix1,$row,3)*k-matrix($matrix2,3,$col);
}

@function k-matrix-multiplier($matrix1,$matrix2) {
    $matrix11: k-matrix-multiplier-tool($matrix1, $matrix2, 1, 1);
    $matrix12: k-matrix-multiplier-tool($matrix1, $matrix2, 1, 2);
    $matrix13: k-matrix-multiplier-tool($matrix1, $matrix2, 1, 3);
    $matrix21: k-matrix-multiplier-tool($matrix1, $matrix2, 2, 1);
    $matrix22: k-matrix-multiplier-tool($matrix1, $matrix2, 2, 2);
    $matrix23: k-matrix-multiplier-tool($matrix1, $matrix2, 2, 3);
    $matrix31: k-matrix-multiplier-tool($matrix1, $matrix2, 3, 1);
    $matrix32: k-matrix-multiplier-tool($matrix1, $matrix2, 3, 2);
    $matrix33: k-matrix-multiplier-tool($matrix1, $matrix2, 3, 3);
    @return (($matrix11 $matrix12 $matrix13), ($matrix21 $matrix22 $matrix23), ($matrix31 $matrix32 $matrix33));
}

// $matrix is like ((1 2 3 4),(1 2 3 4)) for [1 2 3 4, 1 2 3 4]
// make sure the two matrix could be join together
@function k-matrix3d-multiplier-tool($matrix1,$matrix2,$row,$col) {
    @return k-matrix($matrix1,$row,1)*k-matrix($matrix2,1,$col)+k-matrix($matrix1,$row,2)*k-matrix($matrix2,2,$col)+k-matrix($matrix1,$row,3)*k-matrix($matrix2,3,$col)+k-matrix($matrix1,$row,4)*k-matrix($matrix2,4,$col);
}

@function k-matrix3d-multiplier($matrix1,$matrix2) {
    $matrix11: k-matrix3d-multiplier-tool($matrix1, $matrix2, 1, 1);
    $matrix12: k-matrix3d-multiplier-tool($matrix1, $matrix2, 1, 2);
    $matrix13: k-matrix3d-multiplier-tool($matrix1, $matrix2, 1, 3);
    $matrix14: k-matrix3d-multiplier-tool($matrix1, $matrix2, 1, 4);

    $matrix21: k-matrix3d-multiplier-tool($matrix1, $matrix2, 2, 1);
    $matrix22: k-matrix3d-multiplier-tool($matrix1, $matrix2, 2, 2);
    $matrix23: k-matrix3d-multiplier-tool($matrix1, $matrix2, 2, 3);
    $matrix24: k-matrix3d-multiplier-tool($matrix1, $matrix2, 2, 4);

    $matrix31: k-matrix3d-multiplier-tool($matrix1, $matrix2, 3, 1);
    $matrix32: k-matrix3d-multiplier-tool($matrix1, $matrix2, 3, 2);
    $matrix33: k-matrix3d-multiplier-tool($matrix1, $matrix2, 3, 3);
    $matrix34: k-matrix3d-multiplier-tool($matrix1, $matrix2, 3, 4);

    $matrix41: k-matrix3d-multiplier-tool($matrix1, $matrix2, 4, 1);
    $matrix42: k-matrix3d-multiplier-tool($matrix1, $matrix2, 4, 2);
    $matrix43: k-matrix3d-multiplier-tool($matrix1, $matrix2, 4, 3);
    $matrix44: k-matrix3d-multiplier-tool($matrix1, $matrix2, 4, 4);

    @return (($matrix11 $matrix12 $matrix13 $matrix14), ($matrix21 $matrix22 $matrix23 $matrix24), ($matrix31 $matrix32 $matrix33 $matrix34), ($matrix41 $matrix42 $matrix43 $matrix44));
}


@mixin k-transform($transform) {
    transform: $transform;
    -ms-transform: $transform; /* IE 9 */
    -moz-transform: $transform; /* Firefox */
    -webkit-transform: $transform; /* Safari 和 Chrome */
    -o-transform: $transform; /* Opera */
}




// ues it like @include k-transforms((translate 12 34),(translateX 30),(scaleX 2)...)
@mixin k-transforms($transforms...) {
    //record the current position , used when the scale or rotate transform
    $cur_positionX:0;
    $cur_positionY:0;
    $init_matrix: ((1 0 0), (0 1 0), (0 0 1));
    @each $transform in $transforms {
        @if nth($transform,1) == translate {
            $x:nth($transform, 2);
            $y:nth($transform, 3);
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($x $y 1)));
            $cur_positionX:$cur_positionX + $x;
            $cur_positionY: $cur_positionY + $y;
        } @else if nth($transform,1) == translateX {
            $x:nth($transform, 2);
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($x 0 1)));
            $cur_positionX:$cur_positionX + $x;
        } @else if nth($transform,1) == translateY {
            $y:nth($transform, 2);
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0 nth($transform, 2) 1)));
            $cur_positionY: $cur_positionY + $y;
        } @else if nth($transform,1) == rotate {
            $r: nth($transform, 2);
            $cos: k-cos($r);
            $sin: k-sin($r);
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, (($cos $sin 0), (0-$sin $cos 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == scale {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((nth($transform, 2) 0 0), (0 nth($transform, 3) 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == scaleX {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((nth($transform, 2) 0 0), (0 1 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == scaleY {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 nth($transform, 2) 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == skew {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 k-tan(nth($transform, 3)) 0), (k-tan(nth($transform, 2)) 1 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == skewX {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (k-tan(nth($transform, 2)) 1 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == skewY {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 k-tan(nth($transform, 2)) 0), (0 1 0), (0 0 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        } @else if nth($transform,1) == matrix {
            //first pull it to 0，0
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), (0-$cur_positionX 0-$cur_positionY 1)));
            //secondly do the transform
            $init_matrix: k-matrix-multiplier($init_matrix, ((nth($transform, 2) nth($transform, 3) 0), (nth($transform, 4) nth($transform, 5) 0), (nth($transform, 6) nth($transform, 7) 1)));
            //finally pull it back
            $init_matrix: k-matrix-multiplier($init_matrix, ((1 0 0), (0 1 0), ($cur_positionX $cur_positionY 1)));
        }
    }
    @include k-transform(matrix(k-matrix-param($init_matrix)));
}

// ues it like @include k-transforms((translate 12 34 32),(translateX 30),(scaleX 2),(rotateX 20)...)
@mixin k-3dtransforms($transforms...) {
    $init_matrix: ((1 0 0 0), (0 1 0 0), (0 0 1 0), (0 0 0 1));
    @each $transform in $transforms {
        @if nth($transform,1) == translate3d {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 1 0 0), (0 0 1 0), (nth($transform, 2) nth($transform, 3) nth($transform, 4) 1)));
        } @else if nth($transform,1) == translateX {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 1 0 0), (0 0 1 0), (nth($transform, 2) 0 0 1)));
        } @else if nth($transform,1) == translateY {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 1 0 0), (0 0 1 0), (0 nth($transform, 2) 0 1)));
        } @else if nth($transform,1) == translateZ {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 1 0 0), (0 0 1 0), (0 0 nth($transform, 2) 1)));
        } @else if nth($transform,1) == rotate3d {
            $r: nth($transform, 5);
            $cos: k-cos($r);
            $sin: k-sin($r);
            $nx: nth($transform, 2);
            $ny: nth($transform, 3);
            $nz: nth($transform, 4);
            $len: k-sqrt($nx*$nx + $ny*$ny + $nz*$nz);
            $nx: $nx / $len;
            $ny: $ny / $len;
            $nz: $nz / $len;
            $init_matrix: k-matrix3d-multiplier($init_matrix,
                            (
                                            ($cos + $nx*$nx*(1 - $cos) $nx*$ny*(1 - $cos)+$nz*$sin $nx*$nz*(1 - $cos)-$ny*$sin 0),
                                            ($nx*$ny*(1 - $cos)-$nz*$sin $ny * $ny * (1 - $cos) + $cos $ny*$nz*(1 - $cos)+$nx*$sin 0),
                                            ($nx*$nz*(1 - $cos)+$ny*$sin $ny*$nz*(1 - $cos)-$nx*$sin $nz*$nz*(1 - $cos)+$cos 0),
                                            (0 0 0 1)
                            ));
        } @else if nth($transform,1) == rotateX {
            $r: nth($transform, 2);
            $cos: k-cos($r);
            $sin: k-sin($r);
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 $cos $sin 0), (0 0-$sin $cos 0), (0 0 0 1)));
        } @else if nth($transform,1) == rotateY {
            $r: nth($transform, 2);
            $cos: k-cos($r);
            $sin: k-sin($r);
            $init_matrix: k-matrix3d-multiplier($init_matrix, (($cos 0 0-$sin 0), (0 1 0 0), ($sin 0 $cos 0), (0 0 0 1)));
        } @else if nth($transform,1) == rotateZ {
            $r: nth($transform, 2);
            $cos: k-cos($r);
            $sin: k-sin($r);
            $init_matrix: k-matrix3d-multiplier($init_matrix, (($cos $sin 0 0), (0-$sin $cos 0 0), (0 0 1 0), (0 0 0 1)));
        } @else if nth($transform,1) == scale3d {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((nth($transform, 2) 0 0 0), (0 nth($transform, 3) 0 0), (0 0 nth($transform, 4) 0), (0 0 0 1)));
        } @else if nth($transform,1) == scaleX {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((nth($transform, 2) 0 0 0), (0 1 0 0), (0 0 1 0), (0 0 0 1)));
        } @else if nth($transform,1) == scaleY {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 nth($transform, 2) 0 0), (0 0 1 0), (0 0 0 1)));
        } @else if nth($transform,1) == scaleZ {
            $init_matrix: k-matrix3d-multiplier($init_matrix, ((1 0 0 0), (0 1 0 0), (0 0 nth($transform, 2) 0), (0 0 0 1)));
        } @else if nth($transform,1) == matrix3d {
            $init_matrix: k-matrix3d-multiplier($init_matrix,
                            (
                                            (nth($transform, 2) nth($transform, 3) nth($transform, 4) nth($transform, 5)),
                                            (nth($transform, 6) nth($transform, 7) nth($transform, 8) nth($transform, 9)),
                                            (nth($transform, 10) nth($transform, 11) nth($transform, 12) nth($transform, 13)),
                                            (nth($transform, 14) nth($transform, 15) nth($transform, 16) nth($transform, 17))
                            ));
        }
    }
    @include k-transform(matrix3d(k-3dmatrix-param($init_matrix)));
}
